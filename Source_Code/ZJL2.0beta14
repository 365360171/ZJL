#!/system/bin/sh

# 读取当前上级目录
cd ${0%/*/*}

# 删除bak后缀文件
rm -f *.bak */*.bak 2>/dev/null
# 赋予权限
chmod -R 777 * 2>/dev/null

# 循环判断模块文件夹里是否有（busybox iptables ip6tables）模块
for ZJL in busybox iptables ip6tables
do
	# 如果存在，则设置模块别名
	[[ -s */${ZJL} ]] && alias ${ZJL}="*/${ZJL}"
done

# 输出两个空行
echo "\n\n"

# 判断是否使用busybox
if [[ `busybox --help` ]]
then
	for ZJL in ip ls mv rm cat sed grep chmod pkill pgrep ifconfig
	do
		# 设置命令别名
		alias ${ZJL}="busybox ${ZJL}"
	done
	
else
	# 读取是否存在配置文件，没有则写入
	if [[ !`sed -n 's/ML=//p' /data/ZJLML.sh` ]]
	then
		# 读取系统是否存在脚本运行所需命令
		for ZJL in ip ls mv rm cat sed grep chmod pkill pgrep
		do
			# 如果有一个命令不存在，则退出脚本
			if [[ "${ZJL} not found" == `type ${ZJL}` ]]
			then
				# 输出提示
				echo "    ────────────────\n\n              ZJL 2.0\n\n          无busybox启动失败\n\n          手机需内置以下命令\n\n      ip ls mv rm cat sed curl\n       grep chmod pkill pgrep\n\n          所以请安装busybox\n\n         或复制到模块文件夹里\n\n    ────────────────"
				# 退出脚本
				exit
			fi
		done
		
		# 如果命令都存在，则写入配置文件
		echo "ML=\"ON\"" > /data/ZJLML.sh
		# 文件赋权限
		chmod 777 /data/ZJLML.sh
	fi
	
	# 表示当前脚本找不到busybox，将使用系统自带命令
	JCBU="OFF"
	
fi 2>/dev/null

# 读取防跳配置文件
DQPZ="`cat *.ini`" 2>/dev/null
# 过滤以 // 为开头的注释内容
PZ="`echo "${DQPZ}" | sed 's/\/\/.*$//;s/[ ][ ]*/ /g;s/[ \t]*$//;/^$/d'`"

# 用来读取 = 号后面的内容
readSetting()
{
	echo "${PZ}" | sed -n 's/'${1}'=[ \t]*//p'
}

# 开机自启
autoOn()
{
	# 读取配置文件内开启自启填的选项
	local option="$(readSetting 开机自启)"

	# 设置实现开启自启文件的路径
	local path="/system/bin/debuggerd"
	# 设置读取是否开启自启状态文件的路径
	local readState="/data/ZJL.sh"
	
	# 选项为 通用 且状态文件不存在，就为true
	if [[ "通用" == ${option} ]] && [ ! -s ${path}.ori ]
	then
		# 把 debuggerd 重命名为 debuggerd.ori
		mv ${path} ${path}.ori
		# 写入内容到 debuggerd 文件
		echo '#!/system/bin/sh\nscript()\n{\n	sleep 15\n	'${readState}'\n	rm -f Start.log\n	for ZJL in '${readState}'\n	do\n	${ZJL} &>>Start.log\n	done\n}\nscript &\n'${path}.ori'' >${path}
		# 写入防跳路径到状态文件内
		echo "#!/system/bin/sh\n$0 OFF ON" > ${readState}
		# 给三个要用到的文件赋上777权限
		chmod 777 ${path} ${path}.ori ${readState}
		
	# 选项不为 通用 且状态文件存在的话，就为true
	elif [[ "通用" != ${option} ]] && [ -s ${path}.ori ]
	then
		# 把 debuggerd.ori 重命名为 debuggerd
		mv ${path}.ori ${path}
		# 给 debuggerd 文件赋权限
		chmod 755 ${path}
		# 删除状态文件
		rm ${readState}
	fi
	
	
	# 重写路径，第二个自启方法
	path="/system/etc/init.qcom.post_option.sh"
	# 重写读取状态文件路径
	readState="`cat ${path} | grep "ZJL OFF ON"`"
	
	# 选项为 高通 且状态为关闭的话，就为true
	if [[ "高通" == ${option} && ${readState} == "" ]]
	then
		# 写入防跳路径到 init.qcom.post_option.sh 文件内
		echo "\n$0 OFF ON" >> ${path}
		
	# 选项不为 高通 且状态为开启的话，就为true
	elif [[ "高通" != ${option} && ${readState} ]]
	then
		# 删除 init.qcom.post_option.sh 文件内的防跳路径
		echo "`sed '/ZJL/d' ${path}`" > ${path}
	fi
	
	
	# 重写路径，第三个自启方法
	path="/su/su.d/ZJL.sh"
	
	# 选项不为 su 且自启文件不存在的话，就为true
	if [[ "su" == ${option} ]] && [ ! -s ${path} ]
	then
		# 写入防跳路径到自启文件
		echo "#!/system/bin/sh\n$0 OFF ON" > ${path}
		# 给权限
		chmod 777 ${path}
		
	# 选项不为 su 且自启文件存在的话，就为true
	elif [[ "su" != ${option} ]] && [ -s ${path} ]
	then
		# 删除自启文件
		rm ${path}
	fi
	
	
	# 重写路径，第四个自启方法
	path=/sbin/.core/img/.core/service.d/ZJL.sh
	
	# 选项不为 面具 且状态为开启的话，就为true
	if [[ "面具" == ${option} ]] && [ ! -s ${path} ]
	then
		# 写入防跳路径到自启文件
		echo "#!/system/bin/sh\n$0 OFF ON" > ${path}
		# 给权限
		chmod 777 ${path}
		
	# 选项不为 面具 且状态为开启的话，就为true
	elif [[ "面具" != ${option} ]] && [ -s ${path} ]
	then
		# 删除自启文件
		rm ${path}
	fi
}

# 开关数据流量
switchNetwork()
{
	if [[ "开启" == $(readSetting 开关数据) ]]
	then
		[[ "ON" == ${1} ]] && svc data enable || svc data disable
	fi
}

# 开启redsodks模块
openRedsocks2()
{
	local redsocks2TcpPort="${1}"
	local RIP="`echo "$(readSetting TCP代理)" | grep -Eo "[0-9.]+"`"
	local RDK="`echo "$(readSetting TCP端口)" | grep -o [0-9][0-9]*`"
	
	# 设置缺省配置
	[[ "" == ${redsocks2TcpPort} ]] && redsocks2TcpPort="1256"
	[[ "" == ${RIP} ]] && RIP="10.0.0.172"
	[[ "" == ${RDK} ]] && RDK="80"
	
	# 写入配置
	echo "base {
	log_debug=off;
	log_info=off;
	log=stderr;
	daemon=on;
	redirector=iptables;
	}
	
redsocks {
	local_ip=0.0.0.0;
	local_port=${redsocks2TcpPort};
	ip=${RIP};
	port=${RDK};
	type=http-connect;
}" > ${0%/*}/redsocks2.conf
	# 赋权限
	chmod 777 */redsocks2.conf
	# 开启redsodks模块
	*/redsocks2 -c */redsocks2.conf
}

# 开启pdnsd模块
openPdnsd()
{
	local pdnsdDnsPort="${1}"
	local PDNS="`echo "$(readSetting DNS代理)" | grep -Eo "[0-9.]+"`"
	
	# 设置缺省配置
	[[ "" == ${pdnsdDnsPort} ]] && pdnsdDnsPort="65053"
	[[ "" == ${RDNS} ]] && PDNS="119.29.29.29"
	
	# 写入配置
	echo "global {
	perm_cache=4096;
	cache_dir=/data/pdnsd;
	server_ip=0.0.0.0;
	server_port=${pdnsdDnsPort};
	query_method=tcp_only;
	run_ipv4=on;
	min_ttl=3d;
	max_ttl=1w;
	timeout=10;
	daemon=on;
}
	
server {
	ip=${PDNS};
	timeout=5;
}" > ${0%/*}/pdnsd.conf
	# 赋权限
	chmod 777 */pdnsd.conf
	# 开启pdnsd模块
	*/pdnsd -c */pdnsd.conf
}

# 放行本机UID
releaseUid()
{
	iptables -t nat -I OUTPUT -m owner --uid ${1} -j ACCEPT
	iptables -t mangle -I OUTPUT -m owner --uid ${1} -j ACCEPT
}

# 放行指定 协议 && 端口
releasePort()
{
	for ZJL in ${3}
	do
		iptables -t nat -I ${1} -p ${2} -m multiport --dport ${ZJL} -j ACCEPT
		iptables -t mangle -I ${1} -p ${2} -m multiport --dport ${ZJL} -j ACCEPT
	done
}

# 转发规则
forwardingRule()
{
	iptables -t nat -I ${1} -j REDIRECT
	
	[[ "放行" != ${2} && "禁网" != ${2} ]] && iptables -t nat -I ${1} -p 17 -m multiport --dport 53,5353 -j REDIRECT --to ${3}
	
	iptables -t nat -I ${1} -p 6 -j REDIRECT --to ${tcpForwardingPort}
}

# 直连转发规则
directForwardingRule()
{
	[[ "放行" != ${2} && "禁网" != ${2} ]] && iptables -t nat -I ${1} -p 17 -m multiport --dport 53,5353 -j REDIRECT --to ${pdnsdDnsPort}
	
	iptables -t nat -I ${1} -p 6 ! --dport 80 -j REDIRECT --to ${redsocks2TcpPort}
	iptables -t nat -I ${1} -p 6 --dport 80 -j DNAT --to ${directServerIP}:${directServerPort}
}

# 通过curl检测网络连接
detectionNetwork()
{
	extranetIp="`curl --connect-timeout 1 "http://myip.ipip.net/"`"

	[[ ${extranetIp} ]] && HTTP="成功 √" || HTTP="失败 ×"
	[[ `curl --connect-timeout 1 ds.alipay.com:443` ]] && HTTPS="成功 √" || HTTPS="失败 ×"
}

# 游戏流量规则
releaseGame()
{
	# 读取游戏配置
	local YX="$(readSetting 游戏)"
	# 预设一个局部变量存游戏UID
	local uid=""
	# 存储游戏包名 游戏列表：王者荣耀，QQ飞车，CF，全军出击，刺激战场，第五人格网易版，明日之后网易版
	local packageName="com.tencent.tmgp.sgame com.tencent.tmgp.speedmobile com.tencent.tmgp.cf com.tencent.tmgp.pubgm com.tencent.tmgp.pubgmhd com.netease.mrzh com.netease.dwrg"
	
	# 判断选项执行相应规则，选项为空则不操作
	if [[ "放行UID" == ${YX} ]]
	then
		for ZJL in ${packageName}
		do
			uid="`grep ${ZJL} /data/system/packages.list | sed 's/[^ ]* //;s/ .*//'`"
			[[ "" == ${uid} ]] && continue || releaseUid "${uid}"
		done
		
	elif [[ "放行UDP" == ${YX} ]]
	then
		for ZJL in ${packageName}
		do
			uid="`grep ${ZJL} /data/system/packages.list | sed 's/[^ ]* //;s/ .*//'`"
			[[ "" == ${uid} ]] && continue
			
			iptables -t nat -I OUTPUT -p 17 -m owner --uid ${uid} -j ACCEPT
			iptables -t mangle -I OUTPUT -p 17 -m owner --uid ${uid} -j ACCEPT
		done
		
	elif [[ "禁网" == ${YX} ]]
	then
		for ZJL in ${packageName}
		do
			uid="`grep ${ZJL} /data/system/packages.list | sed 's/[^ ]* //;s/ .*//'`"
			[[ "" == ${uid} ]] && continue
			
			iptables -t mangle -I OUTPUT -m owner --uid ${uid} -j DROP
		done
	fi
}

# 转发OUTPUT链规则
releaseOutput()
{
	# 读取是否开启白名单功能
	local intranetWhiteList="`echo "$(readSetting 内网白名单)" | grep -o [0-9][0-9.-]*`"
	# 预设几个变量存储IP
	local IP1=""
	local IP2=""
	local IP3=""
	local IP4=""
	
	if [[ ${intranetWhiteList} ]]
	then
		for IP in ${intranetWhiteList}
		do
			if `echo ${IP} | grep -`
			then
				iptables -t mangle -I OUTPUT -s ${IP}/16 -p 6 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
				
				[[ "禁网" != ${nativeDNS} ]] && iptables -t mangle -I OUTPUT -s ${IP}/16 -p 17 -m multiport --dport 53,5353 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
				
			else
				IP1="${IP%.*}."
				IP2="${IP#*.}"
				IP3="${IP2%-*}"
				IP4="${IP2#*-}"
				
				if [[ "禁网" != ${nativeDNS} ]]
				then
					for ZJL in `seq ${IP3} ${IP4}`
					do
						iptables -t mangle -I OUTPUT -s ${IP1}${ZJL}/16 -p 6 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
						iptables -t mangle -I OUTPUT -s ${IP1}${ZJL}/16 -p 17 -m multiport --dport 53,5353 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
					done
					
				else
					for ZJL in `seq ${IP3} ${IP4}`
					do
						iptables -t mangle -I OUTPUT -s ${IP1}${ZJL}/16 -p 6 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
					done
				fi
			fi
		done
		
	elif [[ "禁网" == ${nativeDNS} ]]
	then
		iptables -t mangle -I OUTPUT -p 6 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
		
	else
		iptables -t mangle -I OUTPUT -p 6 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
		iptables -t mangle -I OUTPUT -p 17 -m multiport --dport 53,5353 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	fi
}

# 获取传入的网卡所使用的流量
getFlow()
{
	# 判断是否存在busybox
	if [[ "" == ${JCBU} ]]
	then
		# 获取传入的网卡信息
		local networkCard="`ifconfig ${1}`"
		# 获取网卡使用的流量
		local flow="`echo "${networkCard#*RX bytes:}" | sed 's/\([^(]*(\)\([^)]*\)\(.*\)/\2/;s/i.*//g'`"
		
		# 输出流量数
		[[ "0.0 B" == ${flow} || "" == ${flow} ]] && ZJL SCJZ "   已用: 没查到 ×\n" " " || ZJL SCJZ "   已用: ${flow}\n" " "
	fi
}

# 文件居中
produce(){
	local product="$(printf "%*s" "$1" "$2")"
	echo "${product// /"$2"}"
}
ZJL(){
	local term_width="51"

	if [[ "SCJZ" == ${1} ]]
	then
		if [[ `echo "$2" | grep -Eo [^\x00-\xff]+ | sed 's/[[:punct:]]//g;s/ //g'` ]]
		then
			local chinese="`echo "${2}" | grep -Eo [^\x00-\xff]+ | sed 's/[[:punct:]]//g;s/ //g'`"
			local chinese_length="${#chinese}"
			local english_length="$((${#2} - chinese_length))"
			((chinese_length = ${chinese_length} * 40 / 75))
			local total_width="$((chinese_length + english_length))"
		else
			local total_width="${#2}"
		fi
		
		local head_width="$(((term_width - total_width) / 2))"
		local end_width="$(((term_width - total_width) - head_width))"

		if [[ "onn" == ${5} ]]
		then
			((head_width = head_width - 2))
		elif [[ "on" == ${5} ]]
		then
			((head_width = head_width - 1))
		fi
		
		local head="`produce "${head_width}" "$3"`"
		local end="`produce "${end_width}" "$3"`"
		
		[[ ${4} ]] && ${4} "${6}${head}${2}${end}" || echo "${6}${head}${2}${end}"
	fi
	
	if [[ "side" == ${1} ]]
	then
		local total_word="${2}${3}"
		if [[ `echo "${total_word}" | grep -Eo [^\x00-\xff]+ | sed 's/[[:punct:]]//g;s/ //g'` ]]
		then
			local chinese="`echo "${total_word}" | grep -Eo [^\x00-\xff]+ | sed 's/[[:punct:]]//g;s/ //g'`"
			local chinese_length="$((${#chinese} * 2))"
			local english_length="$((${#total_word} - chinese_length / 2))"
			local total_width="$((chinese_length + english_length))"
		else
			local total_width="${#total_word}"
		fi
		
		if [[ ${6} == on ]]
		then
			((total_width=total_width + 2))
		elif [[ ${6} == onn ]]
		then
			((total_width=total_width + 3))
		fi
		
		local left_width="$((term_width - total_width))"
		local space="`produce ${left_width} " "`"
		
		[[ ${5} ]] && ${5} "${7}${2}${space}${3}" || echo "${7}${2}${space}${3}"
	fi
}

# 读取配置
nativeDNS="$(readSetting 本机DNS)"
sharedNetworkDns="$(readSetting 共享DNS)"
unlimitedBandwidthWay="$(readSetting 免流方式)"
# 直连IP
directServerIP="`echo "$unlimitedBandwidthWay" | grep -Eo "[0-9.]+"`"
directServerPort="`echo "$(readSetting 直连端口)" | grep -o [0-9][0-9]*`"
selectModeFile="$(readSetting 选择模式)"
detectionNetwork="$(readSetting 检测联网)"
quicklyOpenScripts="$(readSetting 秒开防跳)"
outputTail="`echo "${DQPZ#*小尾巴=}"`"

# 读取模式文件
[[ ${selectModeFile} ]] && MS="${selectModeFile}.conf" || MS="*.conf"

# 查看模式文件状态，正常为空
if [[ `ls *.conf` ]]
then
	if [[ ${selectModeFile} ]]
	then
		if `ls ${MS}`
		then
			# 没找到配置里选择的模式文件
			modeFileState="noSelectedModeWasFound"
			
		elif [ ! -s ${MS} ]
		then
			# 模式文件没有内容
			modeFileState="noContent"
		fi
	else
		if echo *.conf | grep -q ' '
		then
			# 请去防跳配置里填选模式名
			modeFileState="pleaseChoose"
			
		elif [ ! -s ${MS} ]
		then
			# 模式文件没有内容
			modeFileState="noContent"
		fi
	fi
	
else
	# 没找到模式文件
	modeFileState="noModeFile"
fi 2>/dev/null

# 检测是否要开启PDNSD
if [[ "放行" == ${nativeDNS} || "禁网" == ${nativeDNS} ]] && [[ "放行" == ${sharedNetworkDns} || "禁网" == ${sharedNetworkDns} ]]
then
	directServerDNS="OFF"
fi

# 设置直连缺省转发端口
[[ "" == ${directServerPort} ]] && directServerPort="80"


#关闭防跳
if [[ $1 == "OFF" ]]
then
	# 关闭数据
	switchNetwork "OFF"
	
	# 关闭模块
	for ZJL in tiny pdnsd CProxy redsocks2 localproxy
	do
		pkill ${ZJL}
	done
	
	#清除iptables规则
	iptables -t nat -F PREROUTING
	iptables -t mangle -F PREROUTING
	iptables -t nat -F OUTPUT
	ip6tables -t mangle -F PREROUTING
	
	for ZJL in OUTPUT FORWARD
	do
		ip6tables -t mangle -P ${ZJL} ACCEPT
		iptables -t mangle -P ${ZJL} ACCEPT
		iptables -t mangle -F ${ZJL}
	done
	
	# 调用开机自启函数
	autoOn
	
fi 2>/dev/null


# 开启防跳
if [[ $2 == "ON" ]]
then
	# 如果为直连模式，开启redsocks && pdnsd模块转发https和dns
	if [[ ${directServerIP} ]]
	then
		# 读取redsocks的端口
		redsocks2TcpPort="`echo "$(readSetting TCP转发端口)" | grep -o [0-9][0-9]*`"
		# 开启redsodks模块
		openRedsocks2 "${redsocks2TcpPort}"
		
		if [[ "OFF" != ${directServerDNS} ]]
		then
			# 读取pdnsd的端口
			pdnsdDnsPort="`echo "$(readSetting DNS转发端口)" | grep -o [0-9][0-9]*`"
			# 开启pdnsd模块
			openPdnsd "${pdnsdDnsPort}"
		fi
	
	# 否则如果模式状态正常，就配置流量转发端口
	elif ${modeFileState}
	then
		# 读取防跳TCP转发端口
		tcpForwardingPort="`grep "^listen_port" ${MS} | grep -o [0-9][0-9]*`"
		
		# 读取使用哪个核心
		if [[ "CProxy" == ${unlimitedBandwidthWay} ]]
		then
			# 开启CProxy核心
			*/CProxy ${MS}
			
			# 重写TCP转发端口
			tcpForwardingPort="`grep "tcp_listen" ${MS} | grep -o [0-9][0-9]*`"
			
			# 设置udp转发端口
			udpForwardingPort="`grep udp_listen ${MS} | grep -o [0-9][0-9]*`"
			
		elif [[ "localproxy" == ${unlimitedBandwidthWay} ]]
		then
			# 开启localproxy核心
			*/localproxy -c ${MS}
		else
			# 开tiny核心
			*/tiny -c ${MS}
		fi
		
		# 读取防跳DNS转发端口
		dnsForwardingPort="`grep dns_listen ${MS} | grep -o [0-9][0-9]*`"
	fi
	
	# 如果所需的所有模块都开启，就开始执行防跳规则，否则不开启
	if [[ `pgrep tiny` || `pgrep CProxy` || `pgrep localproxy` ]] || [[ `pgrep redsocks2` && (`pgrep pdnsd` || ${directServerDNS} == "OFF") ]]
	then
		releaseNativeUid="`echo "$(readSetting 放行UID)" | grep -o [0-9][0-9]*`"
		localBannedUID="`echo "$(readSetting 禁网UID)" | grep -o [0-9][0-9]*`"
		releaseNativeUdp="$(readSetting 本机UDP)"
		releaseNativeHttps="$(readSetting 本机HTTPS)"
		releaseNativeTcpPort="`echo "$(readSetting 本机TCP端口)" | sed 's/[ ][ ]*/,/g'`"
		releaseNativeUdpPort="`echo "$(readSetting 本机UDP端口)" | sed 's/[ ][ ]*/,/g'`"
		sharedNetwork="$(readSetting 共享网络)"
		sharedNetworkHttps="$(readSetting 共享HTTPS)"
		sharedNetworkTcpPort="`echo "$(readSetting 共享TCP端口)" | sed 's/[ ][ ]*/,/g'`"
		sharedNetworkUdpPort="`echo "$(readSetting 共享UDP端口)" | sed 's/[ ][ ]*/,/g'`"
		# 放行本机UDP填的UID
		releaseUdpForNativeUid="`echo "${releaseNativeUdp}" | grep -o [0-9][0-9]*`"
		# 放行本机HTTPS填的UID
		releaseHttpsForNativeUid="`echo "${releaseNativeHttps}" | grep -o [0-9][0-9]*`"
		
		# 关闭ipv4路由转发
		echo 1 > /proc/sys/net/ipv4/ip_forward
		echo 1 > /proc/sys/net/ipv4/ip_dynaddr
		
		# 设置redsocks2缺省TCP端口
		[[ "" == ${redsocks2TcpPort} ]] && redsocks2TcpPort="1256"
		
		# 设置pdnsd缺省DNS端口
		[[ "" == ${pdnsdDnsPort} ]] && pdnsdDnsPort="65053"
		
		# 禁mengle链
		iptables -t mangle -P OUTPUT DROP
		ip6tables -t mangle -P OUTPUT DROP
		
		# 调用转发output的函数
		releaseOutput
		
		# 本机转发规则
		if [[ ${directServerIP} ]]
		then
			directForwardingRule "OUTPUT" "${nativeDNS}"
		else
			forwardingRule "OUTPUT" "${nativeDNS}" "${dnsForwardingPort}"
			iptables -t nat -I OUTPUT -m owner --uid-owner `grep user ${MS} | sed 's/.*=[ \t]*//;s/;//'``grep uid ${MS} | grep -o [0-9][0-9]*` -j ACCEPT
		fi
		
		# 共享规则
		if [[ "放行" != ${sharedNetwork} ]]
		then
			if ${directServerIP}
			then
				iptables -t mangle -P FORWARD DROP
				ip6tables -t mangle -P FORWARD DROP
			fi
			
			if [[ "禁网" != ${sharedNetwork}  ]]
			then
				iptables -t mangle -I PREROUTING -s 192.168/16 -p 6 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
				iptables -t mangle -I PREROUTING -s 192.168/16 -p 17 -m multiport --dport 53,5353 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
				
				[[ ${directServerIP} ]] && directForwardingRule "PREROUTING -s 192.168/16" "${sharedNetworkDns}" || forwardingRule "PREROUTING -s 192.168/16" "${sharedNetworkDns}" "53"
				
				[[ "禁网" == ${sharedNetworkDns} ]] && iptables -t mangle -I PREROUTING -s 192.168/16 -p 17 -m multiport --dport 53,5353 -j DROP
			fi
		fi
		
		# 打开数据流量
		switchNetwork "ON"
		
		# 放行本机网卡
		for ZJL in $(readSetting 放行网卡)
		do
			iptables -t nat -I OUTPUT -o ${ZJL} -j ACCEPT
			iptables -t mangle -I OUTPUT -o ${ZJL} -j ACCEPT
		done
		
		# 游戏流量规则
		releaseGame
		
		# 放行本机UID对应的软件的所有流量
		if [[ ${releaseNativeUid} ]]
		then
			for ZJL in ${releaseNativeUid}
			do
				releaseUid "${ZJL}"
			done
		fi
		
		# 禁止本机UID对应的软件的网
		if [[ ${localBannedUID} ]]
		then
			for ZJL in ${localBannedUID}
			do
				iptables -t mangle -I OUTPUT -m owner --uid ${ZJL} -j DROP
			done
		fi
		
		# 放行本机UDP
		if [[ "放行" == ${releaseNativeUdp} ]]
		then
			iptables -t nat -I OUTPUT -p 17 -j ACCEPT
			iptables -t mangle -I OUTPUT -p 17 -j ACCEPT
			
		# 放行本机UID对应的软件的UDP
		elif [[ ${releaseUdpForNativeUid} ]]
		then
			for ZJL in ${releaseUdpForNativeUid}
			do
				iptables -t nat -I OUTPUT -m owner --uid ${ZJL} -p 17 -j ACCEPT
				iptables -t mangle -I OUTPUT -m owner --uid ${ZJL} -p 17 -j ACCEPT
			done
		fi
		
		# 放行本机HTTPS
		if [[ "放行" == ${releaseNativeHttps} ]]
		then
			iptables -t nat -I OUTPUT -p 6 --dport 443 -j ACCEPT
			iptables -t mangle -I OUTPUT -p 6 --dport 443 -j ACCEPT
			
		# 放行本机UID对应的软件的HTTPS
		elif [[ ${releaseHttpsForNativeUid} ]]
		then
			for ZJL in ${releaseHttpsForNativeUid}
			do
				iptables -t nat -I OUTPUT -p 6 --dport 443 -m owner --uid ${ZJL} -j ACCEPT
				iptables -t mangle -I OUTPUT -p 6 --dport 443 -m owner --uid ${ZJL} -j ACCEPT
			done
		fi
		
		# 放行（QQ && TIM && 微信）的 UDP 8000 端口，为网络电话使用的端口
		if [[ "开启" == $(readSetting 放行QQ微信电话) ]]
		then
			for ZJL in tencent.mobileqq tencent.tim tencent.mm
			do
				uid="`grep ${ZJL} /data/system/packages.list | sed 's/[^ ]* //;s/ .*//'`"
				[[ "" == ${uid} ]] && continue
				
				iptables -t nat -I OUTPUT -p 17 --dport 8000 -m owner --uid ${uid} -j ACCEPT
				iptables -t mangle -I OUTPUT -p 17 --dport 8000 -m owner --uid ${uid} -j ACCEPT
			done
		fi
		
		# 根据包名放行本机UID对应的软件的流量
		for ZJL in ${releasePackageName}
		do
			uid="`grep ${ZJL} /data/system/packages.list | sed 's/[^ ]* //;s/ .*//'`"
			[[ "" == ${uid} ]] && continue || releaseUid "${uid}"
		done
		
				# 放行本机DNS
		[[ "放行" == ${nativeDNS} ]] && iptables -t nat -I OUTPUT -p 17 -m multiport --dport 53,5353 -j ACCEPT
		
		# 放行本机TCP端口
		[[ ${releaseNativeTcpPort} ]] && releasePort "OUTPUT" "6" "${releaseNativeTcpPort}"
		
		# 放行本机UDP端口
		[[ ${releaseNativeUdpPort} ]] && releasePort "OUTPUT" "17" "${releaseNativeUdpPort}"
		
		# 放行共享TCP端口
		[[ ${sharedNetworkTcpPort} ]] && releasePort "PREROUTING -s 192.168/16" "6" "${sharedNetworkTcpPort}"
		
		# 放行共享UDP端口
		[[ ${sharedNetworkUdpPort} ]] && releasePort "PREROUTING -s 192.168/16" "17" "${sharedNetworkUdpPort}"

		if [[ "放行" == $(readSetting 共享UDP) ]]
		then
			iptables -t mangle -I FORWARD -p 17 -j ACCEPT
			iptables -t nat -I PREROUTING -s 192.168/16 -p 17 -j ACCEPT
		fi
		
		if [[ "放行" == ${sharedNetworkHttps} ]]
		then
			iptables -t mangle -I FORWARD -p 6 --dport 443 -j ACCEPT
			iptables -t nat -I PREROUTING -s 192.168/16 -p 6 --dport 443 -j ACCEPT
			
		elif [[ "禁网" == ${sharedNetworkHttps} ]]
		then
			iptables -t mangle -I PREROUTING -s 192.168/16 -p 6 --dport 443 -j DROP
		fi
		
		if [[ "放行" == ${sharedNetworkDns} ]]
		then
			iptables -t mangle -I FORWARD -p 17 --dport 53 -j ACCEPT
			iptables -t nat -I PREROUTING -s 192.168/16 -p 17 --dport 53 -j ACCEPT
		fi
		
		# 如果开启了开关数据功能就执行暂停，等待数据开启
		if [[ "开启" != ${quicklyOpenScripts} && "开启" == $(readSetting 开关数据) ]]
		then
			# 判断检测网络功能是否开启，开启就暂停0.5秒，没开启就暂停1秒
			[[ "开启" == ${detectionNetwork} ]] && sleep 0.5 || sleep 1
		fi
		
	fi
fi


ZJL SCJZ "  ───────────────────\n" " "
ZJL SCJZ "    ZJL  2.0\n" " "

[[ ${JCBU} ]] && ZJL SCJZ " 无busybox使用\n" " "

ZJL SCJZ "  ───────────────────\n" " "

SCMS="   模块:"

if [[ ${directServerIP} ]]
then
	[[ `pgrep redsocks2` ]] && redsocks2=√ || redsocks2=×
	
	if [[ "OFF" != ${directServerDNS} ]]
	then
		[[ `pgrep pdnsd` ]] && pdnsd=√ || pdnsd=×
	fi
	
	ZJL SCJZ "   直连: ${directServerIP}:${directServerPort}\n" " "
	
	[[ "OFF" != ${directServerDNS} ]] && ZJL SCJZ "    模块: redsocks2 ${redsocks2} pdnsd ${pdnsd}\n" " " || ZJL SCJZ "    模块: redsocks2 ${redsocks2}\n" " "
	
	# 输出一行分割
	ZJL SCJZ "  ───────────────────\n" " "
	
else
	# 循环判断哪个免流核心在运行中
	for ZJL in tiny CProxy localproxy
	do
		[[ `pgrep ${ZJL}` ]] && infiniteDataCore="${ZJL}"
	done
	
	# 输出当前使用的免流核心状态
	[[ ${infiniteDataCore} ]] && ZJL SCJZ "  核心: ${infiniteDataCore} √\n" " " || ZJL SCJZ "   核心: 啥都没开 ×\n" " "
	
	# 如果（填选了模式文件 && 模式状态为正常 $$ 模式内容不为空），就输出模式名
	[[ ${selectModeFile} && "" == ${modeFileState} && "noContent" != ${modeFileState} ]] && ZJL SCJZ "${SCMS} ${selectModeFile}.conf\n" " "
	
	# 输出模式文件当前状态
	case ${modeFileState} in
	noSelectedModeWasFound)
		ZJL SCJZ "${SCMS} 没找到${MS}\n" " "
	;;
	pleaseChoose)
		for ZJL in `echo `*.conf``
		do
			ZJL SCJZ "  可选: ${ZJL}\n" " "
		done
		ZJL SCJZ "${SCMS} 配置里选择模式 !\n" " "
	;;
	noContent)
		ZJL SCJZ "${SCMS} 模式内容呢 ?\n" " "
	;;
	noModeFile)
		ZJL SCJZ "${SCMS} 请添加模式 !\n" " "
	;;
	esac
	
	# 如果模式状态不为正常，就输出一行分割
	[[ ${modeFileState} && "开启" != ${quicklyOpenScripts} ]] && ZJL SCJZ "  ───────────────────\n" " "
	
fi 2>/dev/null


if [[ "开启" != ${quicklyOpenScripts} ]]
then

# 获取网卡
networkCard="`ip -4 addr | grep global | grep -v dynamic | grep -v tun | grep -wv "192.168.43.1"`"
# 内网IP
intranetIp="`echo "${networkCard}" | grep -v wlan | grep -v rndis | sed -r 's#.*inet (.*)/[0-9].*#\1#'`"

[[ ${intranetIp} && "开启" == ${detectionNetwork} ]] && detectionNetwork 2>/dev/null

# 查询网络连接信息
netstat="`dumpsys connectivity`"
# 接入点ID || WiFi SSID
nameOfAccessId="`echo "${netstat}" | grep -v ims | grep -v tun | grep extra: | grep -v "(none)" | grep -v "<unknown" | sed 's/.*extra: //;s/,.*//'`"

# 判断当前使用的网卡是否为WiFi网卡
if [[ `echo "${networkCard}" | grep wlan0` ]]
then
	# 获取WiFi名字
	wifiName="`echo "${nameOfAccessId}" | grep '"' | sed 's/"//g'`"
	
	# 获取WiFi密码
	if [ -s /data/misc/wifi/WifiConfigStore.xml ]
	then
		wifiPassword="`grep -wA 3 '<string name="SSID">&quot;'${wifiName}'' /data/misc/wifi/WifiConfigStore.xml | sed -n 's/<string name="PreSharedKey">&quot;*//p' | sed 's/&quot.*//'`"
	else
		wifiPassword="`grep -wA 3 'ssid='\"${wifiName}\"'' /data/misc/wifi/wpa_supplicant.conf | sed -n 's/[ \t]psk=//p' | sed 's/"//g'`"
	fi
	
	ZJL SCJZ "  ───────────────────\n" " "
	ZJL SCJZ "   网络: WIFI 已连接 √\n" " "
	ZJL SCJZ "   名称: ${wifiName}\n" " "
	
	# 输出WiFi密码
	[[ ${wifiPassword} ]] && ZJL SCJZ "   密码: ${wifiPassword}\n" " "
	
	# 输出WiFi使用流量数
	getFlow "wlan0"
	
# 判断是否能读取到流量内网IP
elif [[ ${intranetIp} ]]
then
	# 输出内网IP
	ZJL SCJZ "    内网: ${intranetIp}\n" " "
	
	# 获取接入点信息
	apnInformation="`echo "${netstat}" | grep HttpProxy:`"
	# 获取接入点代理
	apnAgent="`echo ${getApnInformation#*HttpProxy} | sed 's/.*: \[//;s/\].*//'`"
	# 获取接入点端口
	apnPort="`echo ${getApnInformation#*$apnAgent} | sed 's/[^ ]* //;s/ .*//'`"
	
	# 输出接入点
	[[ ${apnAgent}${apnPort} ]] && ZJL SCJZ "  APN: ${nameOfAccessId} ${apnAgent} ${apnPort}\n" " " || ZJL SCJZ "  APN: ${nameOfAccessId} 代理留空\n" " "
	
	# 输出数据使用流量数
	getFlow "`echo "${networkCard}" | grep -v wlan | grep -v rndis | sed 's/[ \t]*$//g;s/$*.*. //g'`"
	
	# 检测网络连接
	if [[ "开启" == ${detectionNetwork} ]]
	then
		ZJL SCJZ "  ───────────────────\n" " "
		ZJL SCJZ "  HTTP 联网${HTTP}  HTTPS 联网${HTTPS}\n" " "
		
		if [[ ${extranetIp} ]]
		then
			echo "${extranetIp}" | sed 's/[][]*来自于：/\n来自于：/g' | while read ZJL
			do
				ZJL SCJZ "  ${ZJL}\n" " "
			done
		else
			ZJL SCJZ "  查询外网IP失败\n" " "
		fi
	fi
	
else
	ZJL SCJZ "   网络: 数据都没开 ×\n" " "
fi 2>/dev/null

HQRWK="`sed -n 's/interface=//p' /data/misc/wifi/hostapd.conf | sed -n '1p'`" 2>/dev/null

if [[ `ip -4 addr | grep "${HQRWK}" | grep -w "192.168.43.1"` ]]
then
	ZJL SCJZ "  ───────────────────\n" " "
	ZJL SCJZ "  热点: `ip -4 neigh | grep REACHABLE | wc -l` 个已连接\n" " "
	ZJL SCJZ "  信息:`cat /data/misc/wifi/softap.conf`\n" " "
	
	# 输出共享网络使用流量数
	getFlow "${HQRWK}"
fi 2>/dev/null

fi

if [[ ${outputTail} ]]
then
	ZJL SCJZ "  ───────────────────\n" " "
	echo "${outputTail}" | while read ZJL;do
		ZJL SCJZ "${ZJL}" " "
	done
	echo
fi

ZJL SCJZ "───────────────────" " "