#!/system/bin/sh

# 用来读取 = 号后面的内容
readSetting()
{
	echo "${PZ}" | sed -n 's/'${1}'=[ \t]*//p'
}


# 包名读取UID
getUid()
{
	grep -w "${1}" /data/system/packages.list | sed 's/\([^ ]*\)[ \t]\([0-9]*\)[ \t]\(.*\)/\2/g'
}


# 开机自启
autoOn()
{
	# 读取配置文件内开启自启填的选项
	local option="`readSetting 开机自启`"

	# 设置实现开启自启文件的路径
	local path="/system/bin/debuggerd"
	# 设置读取是否开启自启状态文件的路径
	local readState="/data/ZJL.sh"
	
	# 选项为 通用 且状态文件不存在，就为true
	if [[ "通用" == ${option} ]] && [ ! -s ${path}.ori ]
	then
		# 把 debuggerd 重命名为 debuggerd.ori
		mv ${path} ${path}.ori
		# 写入内容到 debuggerd 文件
		echo '#!/system/bin/sh\nscript()\n{\n	sleep 15\n	'${readState}'\n	rm -f Start.log\n	for ZJL in '${readState}'\n	do\n	${ZJL} &>>Start.log\n	done\n}\nscript &\n'${path}.ori'' >${path}
		# 写入防跳路径到状态文件内
		echo "#!/system/bin/sh\n${0} ON" > ${readState}
		# 给三个要用到的文件赋上777权限
		chmod 777 ${path} ${path}.ori ${readState}
		
	# 选项不为 通用 且状态文件存在的话，就为true
	elif [[ "通用" != ${option} ]] && [ -s ${path}.ori ]
	then
		# 把 debuggerd.ori 重命名为 debuggerd
		mv ${path}.ori ${path}
		# 给 debuggerd 文件赋权限
		chmod 755 ${path}
		# 删除状态文件
		rm ${readState}
	fi
	
	
	# 重写路径，高通自启方法
	path="/system/etc/init.qcom.post_option.sh"
	# 判断所需文件是否存在 存在就读取状态
	[ -s ${path} ] && readState="`grep "ZJL ON" ${path}`"
	
	# 选项为 高通 且状态为关闭的话，就为true
	if [[ "高通" == ${option} && "" == ${readState} ]]
	then
		# 写入防跳路径到 init.qcom.post_option.sh 文件内
		echo "\n${0} ON" >> ${path}
		
	# 选项不为 高通 且状态为开启的话，就为true
	elif [[ "高通" != ${option} && ${readState} ]]
	then
		# 删除 init.qcom.post_option.sh 文件内的防跳路径
		echo "`sed '/ZJL/d' ${path}`" > ${path}
	fi
	
	
	# 重写路径，SuperSU自启方法
	path="/su/su.d/ZJL.sh"
	
	# 选项不为 su 且自启文件不存在的话，就为true
	if [[ "su" == ${option} ]] && [ ! -s ${path} ]
	then
		# 写入防跳路径到自启文件
		echo "#!/system/bin/sh\n$0 ON" > ${path}
		# 给权限
		chmod 777 ${path}
		
	# 选项不为 su 且自启文件存在的话，就为true
	elif [[ "su" != ${option} ]] && [ -s ${path} ]
	then
		# 删除自启文件
		rm ${path}
	fi
	
	
	# 重写路径，面具自启方法
	path=/sbin/.core/img/.core/service.d/ZJL.sh
	
	# 选项不为 面具 且状态为开启的话，就为true
	if [[ "面具" == ${option} ]] && [ ! -s ${path} ]
	then
		# 写入防跳路径到自启文件
		echo "#!/system/bin/sh\n$0 ON" > ${path}
		# 给权限
		chmod 777 ${path}
		
	# 选项不为 面具 且状态为开启的话，就为true
	elif [[ "面具" != ${option} ]] && [ -s ${path} ]
	then
		# 删除自启文件
		rm ${path}
	fi
}


# 开关数据流量
switchNetwork()
{
	if [[ "开启" == `readSetting 开关数据` ]]
	then
		[[ "ON" == ${1} ]] && svc data enable || svc data disable
	fi
}

# 放行本机UID对应的应用
releaseUid()
{
	iptables -t nat -I OUTPUT -m owner --uid ${1} -j ACCEPT
	iptables -t mangle -I OUTPUT -m owner --uid ${1} -j ACCEPT
}


# 放行指定 协议 && 端口组合
releasePort()
{
	for ZJL in ${3}
	do
		iptables -t nat -I ${1} -p ${2} -m multiport --dport ${ZJL} -j ACCEPT
		iptables -t mangle -I ${1} -p ${2} -m multiport --dport ${ZJL} -j ACCEPT
	done
}


# 游戏流量规则
gameRules()
{
	# 读取游戏配置
	local YX="`readSetting 游戏`"
	# 预设一个局部变量存游戏UID
	local uid=""
	# 存储游戏包名 游戏列表：王者荣耀，QQ飞车，CF，和平精英，火影忍者，第五人格网易版，明日之后网易版
	local packageName="com.tencent.tmgp.sgame com.tencent.tmgp.speedmobile com.tencent.tmgp.cf com.tencent.tmgp.pubgmhd com.tencent.KiHan com.netease.mrzh com.netease.dwrg"
	
	# 判断选项执行相应规则，选项为空则不操作
	if [[ "放行UID" == ${YX} ]]
	then
		for ZJL in ${packageName}
		do
			uid="`getUid ${ZJL}`"
			[[ "" == ${uid} ]] && continue || releaseUid "${uid}"
		done
		
	elif [[ "放行UDP" == ${YX} ]]
	then
		for ZJL in ${packageName}
		do
			uid="`getUid ${ZJL}`"
			[[ "" == ${uid} ]] && continue
			
			iptables -t nat -I OUTPUT -p 17 -m owner --uid ${uid} -j ACCEPT
			iptables -t mangle -I OUTPUT -p 17 -m owner --uid ${uid} -j ACCEPT
		done
		
	elif [[ "禁网" == ${YX} ]]
	then
		for ZJL in ${packageName}
		do
			uid="`getUid ${ZJL}`"
			[[ "" == ${uid} ]] && continue || iptables -t mangle -I OUTPUT -m owner --uid ${uid} -j DROP
		done
	fi
}


# 内网白名单
intranetIPWhiteList()
{
	# 读取白名单设置
	local intranetIpWhiteList="`readSetting 内网白名单 | grep -o "[0-9][0-9.:]*"`"
	
	# 判断是否开启白名单功能
	if [[ ${intranetIpWhiteList} ]]
	then
		# 预设几个变量存储IP
		local ip=""
		# 起始 IP
		local startIp=""
		# 结束 IP
		local stopIp=""
		
		for ip in ${intranetIpWhiteList}
		do
			# 判断是否为IP段
			if [[ `echo ${ip} | grep :` ]]
			then
				startIp="${ip%:*}"
				stopIp="${ip#*:}"
				
				iptables -t mangle -I OUTPUT -p 6 -m iprange --src-range ${startIp}-${stopIp} -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
				[[ "禁网" != ${nativeDNS} ]] && iptables -t mangle -I OUTPUT -p 17 -m iprange --src-range ${startIp}-${stopIp} -m multiport --dport 53,5353 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
			else
				iptables -t mangle -I OUTPUT -s ${ip}/16 -p 6 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
				[[ "禁网" != ${nativeDNS} ]] && iptables -t mangle -I OUTPUT -s ${ip}/16 -p 17 -m multiport --dport 53,5353 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
			fi
		done
		
	else
		# 没有开启白名单功能，转发默认规则
		iptables -t mangle -I OUTPUT -p 6 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
		[[ "禁网" != ${nativeDNS} ]] && iptables -t mangle -I OUTPUT -p 17 -m multiport --dport 53,5353 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
	fi
}


# 核心部分的iptables规则
importantRules() {
	# 禁mengle链
	iptables -t mangle -P OUTPUT DROP
	ip6tables -t mangle -P OUTPUT DROP

	# 内网白名单
	intranetIPWhiteList

	# 本机转发规则
	iptables -t nat -I OUTPUT -j REDIRECT
	iptables -t nat -I OUTPUT -p 6 -j REDIRECT --to ${tcpForwardPort}
	# 判断本机DNS是否为代理
	[[ "放行" != ${nativeDNS} && "禁网" != ${nativeDNS} ]] && iptables -t nat -I OUTPUT -p 17 -m multiport --dport 53,5353 -j REDIRECT --to ${dnsForwardPort}
	
	# 放行本机代理uid或者gid
	if [[ "clnc" != ${InfiniteWebTrafficWay} ]]
	then
		iptables -t nat -I OUTPUT -m owner --uid `grep user ${modeFile} | sed 's/.*=[ \t]*//;s/;//'``grep uid ${modeFile} | grep -o [0-9][0-9]*` -j ACCEPT
	else
		iptables -t nat -I OUTPUT -m owner --gid 3004 -j ACCEPT
	fi
	
	# 读取共享网络的配置
	sharedNetwork="`readSetting 共享网络`"
	
	# 判断共享网络是否为代理或者禁网
	if [[ "放行" != ${sharedNetwork} ]]
	then
		# 禁网 FORWARD 链
		iptables -t mangle -P FORWARD DROP
		ip6tables -t mangle -P FORWARD DROP
		
		# 判断共享网络是否为代理
		if [[ "禁网" != ${sharedNetwork} ]]
		then
			# 共享网络规则
			iptables -t mangle -I PREROUTING -s 192.168/16 -m state --state INVALID -j DROP
			
			iptables -t nat -I PREROUTING -s 192.168/16 ! -d 192.168/16 -j REDIRECT
			iptables -t nat -I PREROUTING -s 192.168/16 -p 6 -j REDIRECT --to ${tcpForwardPort}
			
			# 判断共享DNS是否为禁网
			if [[ "禁网" == ${sharedNetworkDns} ]]
			then
				iptables -t mangle -I PREROUTING -s 192.168/16 -p 17 -m multiport --dport 53,5353 -j DROP
			else
				# 判断共享DNS是否为代理
				[[ "放行" != ${sharedNetworkDns} ]] && iptables -t nat -I PREROUTING -s 192.168/16 -p 17 -m multiport --dport 53,5353 -j REDIRECT --to 53
			fi
		fi
	fi
	
	# 放行本机网卡
	for ZJL in $(readSetting 放行网卡)
	do
		iptables -t nat -I OUTPUT -o ${ZJL} -j ACCEPT
		iptables -t mangle -I OUTPUT -o ${ZJL} -j ACCEPT
	done
	
	iptables -t nat -I OUTPUT -d 192.168/16 -j ACCEPT
	iptables -t mangle -I OUTPUT -d 192.168/16 -j ACCEPT
}


# 次要部分的iptables规则
notImportantRules() {
	# ----- 以下为本机网络部分规则 -----
	
	# 放行本机UID对应的应用
	for ZJL in `readSetting 放行UID | grep -o "[0-9][0-9]*"`
	do
		releaseUid "${ZJL}"
	done
	
	# 禁止本机UID对应的软件的网
	for ZJL in `readSetting 禁网UID | grep -o "[0-9][0-9]*"`
	do
		iptables -t mangle -I OUTPUT -m owner --uid ${ZJL} -j DROP
	done
	
	releaseNativeUdp="`readSetting 本机UDP`"
	# 判断是否放行本机UDP
	if [[ "放行" == ${releaseNativeUdp} ]]
	then
		iptables -t nat -I OUTPUT -p 17 -j ACCEPT
		iptables -t mangle -I OUTPUT -p 17 -j ACCEPT
	else
		# 放行本机UID对应的软件的UDP
		for ZJL in `echo "${releaseNativeUdp}" | grep -o [0-9][0-9]*`
		do
			iptables -t nat -I OUTPUT -m owner --uid ${ZJL} -p 17 -j ACCEPT
			iptables -t mangle -I OUTPUT -m owner --uid ${ZJL} -p 17 -j ACCEPT
		done
	fi
	
	releaseNativeHttps="`readSetting 本机HTTPS`"
	# 放行本机HTTPS
	if [[ "放行" == ${releaseNativeHttps} ]]
	then
		iptables -t nat -I OUTPUT -p 6 --dport 443 -j ACCEPT
		iptables -t mangle -I OUTPUT -p 6 --dport 443 -j ACCEPT
		
	else
		# 放行本机UID对应的软件的HTTPS
		for ZJL in `echo "${releaseNativeHttps}" | grep -o [0-9][0-9]*`
		do
			iptables -t nat -I OUTPUT -p 6 --dport 443 -m owner --uid ${ZJL} -j ACCEPT
			iptables -t mangle -I OUTPUT -p 6 --dport 443 -m owner --uid ${ZJL} -j ACCEPT
		done
	fi
	
	# 根据包名放行本机UID对应的软件的流量
	for ZJL in `readSetting 放行包名`
	do
		for uid in `getUid ${ZJL}`
		do
			[[ "" == ${uid} ]] && continue || releaseUid "${uid}"
		done
	done
	
	# 游戏iptables规则
	gameRules
	
	# 放行（QQ && TIM && 微信）的 UDP 8000 端口，为网络电话使用的端口
	if [[ "放行" == "`readSetting QQ微信电话`" ]]
	then
		for ZJL in tencent.mobileqq tencent.tim tencent.mm
		do
			uid=`getUid ${ZJL}`
			[[ "" == ${uid} ]] && continue
			
			iptables -t nat -I OUTPUT -p 17 --dport 8000 -m owner --uid ${uid} -j ACCEPT
			iptables -t mangle -I OUTPUT -p 17 --dport 8000 -m owner --uid ${uid} -j ACCEPT
		done
	fi
	
	# 放行本机TCP端口
	releasePort "OUTPUT" "6" "`readSetting 本机TCP端口 | sed 's/[ ][ ]*/,/g'`"
	
	# 放行本机UDP端口
	releasePort "OUTPUT" "17" "`readSetting 本机UDP端口 | sed 's/[ ][ ]*/,/g'`"
	
	# 判断是否放行本机DNS
	[[ "放行" == ${nativeDNS} ]] && iptables -t nat -I OUTPUT -p 17 -m multiport --dport 53,5353 -j ACCEPT
	
	
	# ----- 以下为共享网络部分规则 -----
	
	# 判断是否放行共享DNS
	if [[ "放行" == ${sharedNetworkDns} ]]
	then
		iptables -t mangle -I FORWARD -p 17 --dport 53 -j ACCEPT
		iptables -t nat -I PREROUTING -s 192.168/16 -p 17 --dport 53 -j ACCEPT
	fi
	
	# 判断是否放行共享UDP
	if [[ "放行" == "`readSetting 共享UDP`" ]]
	then
		iptables -t mangle -I FORWARD -p 17 -j ACCEPT
		iptables -t nat -I PREROUTING -s 192.168/16 -p 17 -j ACCEPT
	fi
	
	sharedNetworkHttps="`readSetting 共享HTTPS`"
	if [[ "放行" == ${sharedNetworkHttps} ]]
	then
		iptables -t mangle -I FORWARD -p 6 --dport 443 -j ACCEPT
		iptables -t nat -I PREROUTING -s 192.168/16 -p 6 --dport 443 -j ACCEPT
		
	elif [[ "禁网" == ${sharedNetworkHttps} ]]
	then
		iptables -t mangle -I PREROUTING -s 192.168/16 -p 6 --dport 443 -j DROP
	fi
	
	# 放行共享TCP端口
	releasePort "PREROUTING -s 192.168/16" "6" "`readSetting 共享TCP端口 | sed 's/[ ][ ]*/,/g'`"
	
	# 放行共享UDP端口
	releasePort "PREROUTING -s 192.168/16" "17" "`readSetting 共享UDP端口 | sed 's/[ ][ ]*/,/g'`"
}


# 获取传入的网卡所使用的流量
getNetworkCardTraffic()
{
	# 判断是否存在busybox
	if [[ ${isExistBusybox} ]]
	then
		# 获取网卡使用的流量
		local flow="`ifconfig ${1} | sed -n 's/\([^(]*(\)\([^)]*\)i\(.*\)/\2/p'`"
		
		# 输出流量数
		[[ "0.0 B" == ${flow} || "" == ${flow} ]] && middle output "已用: 没查到 ×" " " || middle output "已用: ${flow}" " "
	fi
}


# 输出居中
becomeMiddle(){
	local product="$(printf "%*s" "${1}" "${2}")"
	echo "${product// /"${2}"}"
}
# 居中
middle(){
	local term_width="51"

	if [[ "output" == ${1} ]]
	then
		if [[ `echo "${2}" | grep -Eo [^\x00-\xff]+ | sed 's/[[:punct:]]//g;s/ //g'` ]]
		then
			local chinese="`echo "${2}" | grep -Eo [^\x00-\xff]+ | sed 's/[[:punct:]]//g;s/ //g'`"
			local chinese_length="${#chinese}"
			local english_length="$((${#2} - chinese_length))"
			((chinese_length = ${chinese_length} * 40 / 75))
			local total_width="$((chinese_length + english_length))"
		else
			local total_width="${#2}"
		fi
		
		local head_width="$(((term_width - total_width) / 2))"
		local end_width="$(((term_width - total_width) - head_width))"

		if [[ "onn" == ${5} ]]
		then
			((head_width = head_width - 2))
		elif [[ "on" == ${5} ]]
		then
			((head_width = head_width - 1))
		fi
		
		local head="`becomeMiddle "${head_width}" "$3"`"
		local end="`becomeMiddle "${end_width}" "$3"`"
		
		[[ ${4} ]] && ${4} "${6}${head}${2}${end}" || echo "${6}${head}${2}${end}"
	fi
	
	if [[ "side" == ${1} ]]
	then
		local total_word="${2}${3}"
		if [[ `echo "${total_word}" | grep -Eo [^\x00-\xff]+ | sed 's/[[:punct:]]//g;s/ //g'` ]]
		then
			local chinese="`echo "${total_word}" | grep -Eo [^\x00-\xff]+ | sed 's/[[:punct:]]//g;s/ //g'`"
			local chinese_length="$((${#chinese} * 2))"
			local english_length="$((${#total_word} - chinese_length / 2))"
			local total_width="$((chinese_length + english_length))"
		else
			local total_width="${#total_word}"
		fi
		
		if [[ ${6} == on ]]
		then
			((total_width=total_width + 2))
		elif [[ ${6} == onn ]]
		then
			((total_width=total_width + 3))
		fi
		
		local left_width="$((term_width - total_width))"
		local space="`becomeMiddle ${left_width} " "`"
		
		[[ ${5} ]] && ${5} "${7}${2}${space}${3}" || echo "${7}${2}${space}${3}"
	fi
}


# 初始化
init() {
	# 读取当前文件所在的上级目录
	cd ${0%/*/*}

	# 删除bak后缀文件
	rm -f *.bak */*.bak
	# 赋予权限
	chmod -R 777 *

	# 循环判断模块文件夹里是否有（busybox iptables ip6tables）模块
	for ZJL in busybox iptables ip6tables
	do
		# 如果存在，则设置模块别名
		[ -s */${ZJL} ] && alias ${ZJL}="*/${ZJL}"
	done

	# 输出两个空行
	echo "\n"
	
	# 脚本运行所需命令
	commandRequireds='ls mv rm ip sed grep chmod pkill pgrep ifconfig'
	
	# 判断是否使用busybox
	if [[ `busybox --help` ]]
	then
		for ZJL in ${commandRequireds}
		do
			# 设置命令别名
			alias ${ZJL}="busybox ${ZJL}"
		done
		
		# 表示当前脚本找到了busybox
		isExistBusybox="true"
	else
		# 表示当前脚本找不到busybox，将使用系统自带命令
		
		# 防跳配置文件路径
		iniPath="${0%/*/*/*}/.ZJL.ini"
		# 读取是否存在配置文件
		if [[ !`sed -n 's/command=//p' ${iniPath}` ]]
		then
			# 读取系统是否存在脚本运行所需命令
			for ZJL in ${commandRequireds}
			do
				# 如果有一个命令不存在，则退出脚本
				if [[ "${ZJL} not found" == `type ${ZJL}` ]]
				then
					# 输出提示
					echo "    ────────────────\n\n              ZJL 2.0\n\n          无busybox启动失败\n\n          手机需内置以下命令\n\n      ls mv rm ip sed curl\n       grep chmod pkill pgrep ifconfig\n\n          所以请安装busybox\n\n         或复制到模块文件夹里\n\n    ────────────────"
					# 退出脚本
					exit
				fi
			done
			
			# 如果命令都存在，则写入配置文件
			echo "command=\"ON\"" > ${iniPath}
			# 文件赋权限
			chmod 777 ${iniPath}
		fi
	fi

	# 读取防跳配置文件，并过滤以 // 为开头的注释内容
	PZ="`sed 's/\/\/.*$//;s/[ ][ ]*/ /g;s/[ \t]*$//' *.ini`"
	
	# 读取配置
	nativeDNS="`readSetting 本机DNS`"
	sharedNetworkDns="`readSetting 共享DNS`"
	InfiniteWebTrafficWay="`readSetting 免流方式`"
	selectModeFile="`readSetting 选择模式`"
	checkNetwork="`readSetting 检测联网`"
	quicklyOpenScripts="`readSetting 秒开防跳`"
	
	# 读取模式文件名
	[[ ${selectModeFile} ]] && modeFile="${selectModeFile}.conf" || modeFile="*.conf"

	# 查看模式文件状态，正常为空
	if [[ `ls *.conf` ]]
	then
		# 判断是否指定了模式名
		if [[ ${selectModeFile} ]]
		then
			# 判断是否找到配置里选择的模式文件
			[[ "" = `ls ${modeFile}` ]] && modeFileState="noSelectedModeFile"
		else
			# 判断是否有多个模式文件
			[[ 1 != `ls *.conf | wc -l` ]] && modeFileState="pleaseSelect"
		fi
		
		if [[ ! ${modeFileState} ]]
		then
			# 判断模式文件有没有内容，有模式就为正常
			[ ! -s ${modeFile} ] && modeFileState="noContent" || modeFileState="normal"
		fi
		
	else
		# 没找到模式文件
		modeFileState="noModeFile"
	fi
}


# 显示输出界面
showUi() {
	# 分割线
	dividingLine="_______________________________________\n"

	middle output "${dividingLine}" " "
	middle output "ZJL  2.0" " "

	if [[ ! ${isExistBusybox} ]]
	then
		echo
		middle output "无busybox使用  " " "
	fi

	middle output "${dividingLine}" " "
		
	# 循环判断哪个免流核心在运行
	for ZJL in tiny CProxy clnc localproxy
	do
		if [[ `pgrep ${ZJL}` ]]
		then
			InfiniteWebTrafficCore="${ZJL}"
			break
		fi
	done
	
	# 输出当前使用的免流核心状态
	[[ ${InfiniteWebTrafficCore} ]] && middle output "核心: ${InfiniteWebTrafficCore} √" " " || middle output "核心: 啥都没开 × " " "
	
	# 判断当前模式是否正常
	if [[ "normal" == ${modeFileState} ]]
	then
		# 如果 填选了模式文件 就输出模式名
		if [[ ${selectModeFile} ]]
		then
			middle output "${dividingLine}" " "
			middle output "模式: ${selectModeFile}.conf" " "
		fi
	else
		middle output "${dividingLine}" " "
		
		# 输出模式文件当前状态
		case ${modeFileState} in
			noSelectedModeFile)
				middle output "没找到 ${selectModeFile}.conf\n" " "
				middle output "请去 [选择模式] 里重填 ! " " "
			;;
			pleaseSelect)
				for ZJL in `echo `*.conf``
				do
					middle output " 模式: ${ZJL}\n" " "
				done
				middle output "请使用 [选择模式] 功能 ! " " "
			;;
			noContent)
				middle output "模式内容呢 ?" " "
			;;
			noModeFile)
				middle output "请添加模式 !" " "
			;;
		esac
	fi

	# 判断是否开启快速启动功能
	if [[ "开启" != ${quicklyOpenScripts} ]]
	then
		middle output "${dividingLine}" " "
		
		# 获取 网络连接信息
		networkConnectionInfo="`dumpsys connectivity | grep NetworkAgentInfo{ | grep -v ims | grep -v tun`"
		# 获取网卡和IP
		networkCard="`ip route | grep -v "tun" | grep -v "192.168.43." | sed 's/.*dev[ \t]//'`"
		
		# 判断当前使用的是否为WiFi
		if [[ `echo "${networkCard}" | grep wlan` ]]
		then
			middle output " 网络: WIFI 已连接 √\n" " "
			
			#获取WIFI的网卡
			networkCard="`echo "${networkCard}" | grep wlan | sed 's/[ \t].*//'`"
			# 获取WiFi SSID
			wifiName="`dumpsys netstats | grep iface | grep ${networkCard} | sed -n 's/\(.*\)networkId="\(.*\)"\(.*\)/\2/g;1p'`"
			
			if [[ ${wifiName} ]]
			then
				# 获取WiFi密码
				if [ -s /data/misc/wifi/WifiConfigStore.xml ]
				then
					wifiPassword="`grep -wA 3 '<string name="SSID">&quot;'${wifiName}'' /data/misc/wifi/WifiConfigStore.xml | sed -n 's/\(.*\)<string name="PreSharedKey">&quot;\(.*\)&quot\(.*\)/\2/p'`"
				else
					wifiPassword="`grep -wA 3 'ssid='\"${wifiName}\"'' /data/misc/wifi/wpa_supplicant.conf | sed -n 's/\(.*\)psk="\(.*\)"\(.*\)/\2/p'`" 
				fi
				
				# 输出 WiFi名字
				middle output " 名称: ${wifiName}\n" " "
				# 输出 WiFi密码
				[[ ${wifiPassword} ]] && middle output " 密码: ${wifiPassword}\n" " "
				# 输出 WiFi 使用流量数
				getNetworkCardTraffic "${networkCard}"
			fi
			
		# 当前使用的是流量
		else
			# 判断是否开启检测联网功能，如果开启就开始检测
			if [[ "开启" == ${checkNetwork} ]]
			then
				# 通过curl检测网络连接
				extranetIp="`curl --connect-timeout 1 "http://myip.ipip.net/"`"

				[[ ${extranetIp} ]] && HTTP="成功 √"
				[[ `curl --connect-timeout 1 ds.alipay.com:443` ]] && HTTPS="成功 √"
			fi
			
			# 获取内网IP
			intranetIp="`echo ${networkCard} | grep "rmnet" | sed 's/.*src[ \t]//'`"
			#获取流量的网卡
			networkCard="`echo "${networkCard}" | grep "rmnet" | sed 's/[ \t].*//'`"
			
			# 判断是否能读取到流量内网IP
			if [[ ${intranetIp} ]]
			then
				# 输出内网IP
				middle output " 内网: ${intranetIp}\n" " "
				
				# 获取 APN
				nameOfAccessId="`echo ${networkConnectionInfo} | sed -n 's/.*extra: //;s/,.*//;$p'`"
				# 获取接入点 代理 and 端口 信息
				apnInformation="`echo ${networkConnectionInfo} | grep HttpProxy: | sed 's/.*HttpProxy: //;s/}.*//'`"
				# 获取 APN 代理
				apnAgent="`echo ${apnInformation} | sed 's/.*\[//;s/\].*//'`"
				# 获取 APN 端口
				apnPort="`echo ${apnInformation} | sed 's/.*\] //'`"
				
				# 输出接入点
				[[ ${apnAgent}${apnPort} ]] && middle output " APN: ${nameOfAccessId} ${apnAgent} ${apnPort}\n" " " || middle output "APN: ${nameOfAccessId} 代理留空\n" " "
				
				# 输出数据使用流量数
				getNetworkCardTraffic "${networkCard}"
				
				# 判断是否开启检测联网功能，如果开启就输出结果
				if [[ "开启" == ${checkNetwork} ]]
				then
					middle output "${dividingLine}" " "
					middle output " HTTP 联网${HTTP:="失败 ×"}  HTTPS 联网${HTTPS:="失败 ×"}\n" " "
					if [[ ${extranetIp} ]]
					then
						echo "${extranetIp}" | sed 's/[][]*来自于：/\n\n来自于：/g' | while read ZJL
						do
							middle output "${ZJL}" " "
						done
					else
						middle output "查询外网IP失败 " " "
					fi
				fi
			
			else
				middle output "网络: 数据都没开 ×" " "
			fi
			
			# WLAN热点信息
			wlanHotspotsInfo="`ifconfig | grep -A 6 "192.168.43."`"
			# WLAN热点连接数
			wlanHotspotsConnect="`grep 0x2 /proc/net/arp | grep "192.168.43." | wc -l`"
			# 判断热点是否开启
			if [[ ${wlanHotspotsInfo} || "0" != ${wlanHotspotsConnect} ]]
			then
				middle output "${dividingLine}" " "
				middle output " 热点: ${wlanHotspotsConnect} 个已连接\n" " "

				middle output " 信息:`sed 's/^[ ]?//;:a;N;s/\n//g;$!ba' /data/misc/wifi/softap.conf`\n" " "
				
				# 判断是否存在busybox
				if [[ ${isExistBusybox} ]]
				then
					# 获取共享网络使用流量数
					flow="`echo "${wlanHotspotsInfo}" | sed -n 's/\(.*TX bytes:.*\)(\(.*\)i\(.*\)/\2/p'`"
					
					# 输出共享网络使用流量数
					[[ "0.0 B" == ${flow} || "" == ${flow} ]] && middle output "已用: 没查到 ×" " " || middle output "已用: ${flow}" " "
				fi
			fi
			
		fi
	fi
	
	# 获取小尾巴内容
	outputTail="`echo "${PZ#*小尾巴=}"`"
	# 输出小尾巴内容
	if [[ ${outputTail} ]]
	then
		middle output "${dividingLine}" " "
		echo "${outputTail}" | while read ZJL;do
			middle output "${ZJL}" " "
		done
		# 输出一个空行
		#echo
	fi

	middle output "${dividingLine}" " "
}


# 关闭防跳
OFF() {
	# 关闭数据
	switchNetwork "OFF"
	
	# 关闭模块
	for ZJL in tiny CProxy clnc localproxy
	do
		pkill ${ZJL}
	done
	
	#清除iptables规则
	iptables -t nat -F OUTPUT
	iptables -t nat -F PREROUTING
	iptables -t mangle -F PREROUTING
	
	ip6tables -t mangle -F PREROUTING
	
	for ZJL in OUTPUT FORWARD
	do
		iptables -t mangle -F ${ZJL}
		iptables -t mangle -P ${ZJL} ACCEPT
		
		ip6tables -t mangle -P ${ZJL} ACCEPT
	done
	
	# 调用开机自启函数
	autoOn
}


# 开启防跳
ON() {
	# 如果模式为不正常，就退出函数
	[[ "normal" != ${modeFileState} ]] && return 1
		
	# 读取模式TCP转发端口
	tcpForwardPort="`grep "^listen_port" ${modeFile} | grep -o [0-9][0-9]*`"
	# 读取模式DNS转发端口
	dnsForwardPort="`grep "dns_listen" ${modeFile} | grep -o [0-9][0-9]*`"
	
	# 读取使用哪个核心
	if [[ "CProxy" == ${InfiniteWebTrafficWay} ]]
	then
		# 开启CProxy核心
		*/CProxy ${modeFile}
		
		# 重写TCP转发端口
		tcpForwardPort="`grep "tcp_listen" ${modeFile} | grep -o [0-9][0-9]*`"
		# 设置UDP转发端口
		udpForwardPort="`grep "udp_listen" ${modeFile} | grep -o [0-9][0-9]*`"
		
	elif [[ "clnc" == ${InfiniteWebTrafficWay} ]]
	then
		# 开启clnc核心
		*/clnc -c ${modeFile} -g 3004
		
		dns_listen="`grep '^ *dns_listen' ${modeFile} | grep -o :[0-9][0-9]\*`"
		# 重写防跳DNS转发端口
		dnsForwardPort=${dns_listen#:}
		
		listen_port="`grep '^ *tcp_listen' ${modeFile} | grep -o :[0-9][0-9]\*\;`"
		# 重写防跳TCP转发端口
		tcpForwardPort="`echo ${listen_port#:} | grep -o [0-9][0-9]*`"
		
	elif [[ "localproxy" == ${InfiniteWebTrafficWay} ]]
	then
		# 开启localproxy核心
		*/localproxy -c ${modeFile}
		
	else
		# 开tiny核心
		*/tiny -c ${modeFile}
		
		InfiniteWebTrafficWay="tiny"
	fi
	
	# 如果核心没开启，就退出函数
	[[ ! `pgrep ${InfiniteWebTrafficWay}` ]] && return 2
	
	# 关闭ipv4路由转发
	echo 1 > /proc/sys/net/ipv4/ip_forward
	echo 1 > /proc/sys/net/ipv4/ip_dynaddr
	
	# 调用核心部分的iptables规则
	importantRules
	# 打开数据流量
	switchNetwork "ON"
	# 调用次要部分的iptables规则
	notImportantRules
	
	# 如果开启了[开关数据]功能就执行sleep，等待数据开启
	if [[ "开启" != ${quicklyOpenScripts} && "开启" == "`readSetting 开关数据`" ]]
	then
		# 判断检测网络功能是否开启，开启就暂停0.5秒，没开启就暂停1秒
		[[ "开启" == ${checkNetwork} ]] && sleep 0.5 || sleep 1
	fi
}


# 主函数
main() {
	# 初始化
	init
	
	if [[ "OFF" == ${1} ]]
	then
		# 关闭防跳
		OFF
	elif [[ "ON" == ${1} ]]
	then
		# 开启防跳
		OFF
		ON
	fi
	
	if [[ "UI" == ${2} || "UI" == ${1} ]]
	then
		# 显示界面
		showUi
	else
		middle output "请传入正确的参数！\n" " "
	fi
}


# 调用主函数 并且重定向错误输出
main ${1} ${2} 2>/dev/null